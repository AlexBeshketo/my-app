{"version":3,"file":"static/js/455.a93f98d6.chunk.js","mappings":"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","sources":["webpack://my-app/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/Dialogs/TextInputMessageFormChat.tsx","components/Dialogs/Dialogs/Message.tsx","components/Dialogs/Dialogs/Dialogs.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"main\":\"Dialogs_main__5NNjU\",\"dialogs\":\"Dialogs_dialogs__WTCAs\",\"usersList\":\"Dialogs_usersList__tZy2H\",\"user\":\"Dialogs_user__8ZZ8t\",\"messages\":\"Dialogs_messages__h3jrF\",\"dialogs_message\":\"Dialogs_dialogs_message__osLwu\",\"img\":\"Dialogs_img__5D4uB\",\"addMessageBorder\":\"Dialogs_addMessageBorder__uZEbw\",\"talkbubble\":\"Dialogs_talkbubble__QX5bv\",\"one\":\"Dialogs_one__x3SAr\",\"two\":\"Dialogs_two__MgvyW\",\"item\":\"Dialogs_item__F7DvV\",\"messages_item\":\"Dialogs_messages_item__7v2o9\",\"logo\":\"Dialogs_logo__6OTvo\"};","import {useForm} from \"react-hook-form\";\r\nimport {Button, TextField} from \"@mui/material\";\r\n\r\nimport p from \"../../Profile/Posts/Posts.module.css\";\r\n\r\n\r\nimport React, {useState} from \"react\";\r\nimport AddIcon from '@mui/icons-material/Add';\r\nimport AddAPhotoIcon from '@mui/icons-material/AddAPhoto';\r\nimport GifBoxRoundedIcon from '@mui/icons-material/GifBoxRounded';\r\nimport {useDispatch} from \"react-redux\";\r\nimport {useAppSelector} from \"../../../state/redux-store\";\r\nimport {sendMessage} from \"../../../state/chat-reducer\";\r\n\r\n\r\ntype LoginUserModelType = {\r\n    post: string,\r\n\r\n};\r\n\r\ntype AddPostFormType = {\r\n    addPost?: (newPostBody: string) => void,\r\n    buttonType: string\r\n}\r\n\r\n\r\nexport const TextInputMessageFormChat = React.memo(({buttonType}: AddPostFormType) => {\r\n\r\n    const {register, handleSubmit, resetField, formState: {errors}} = useForm<LoginUserModelType>();\r\n\r\n\r\n    const onSubmit = handleSubmit(data => {\r\n        if (!message) {\r\n            return\r\n        }\r\n        dispatch(sendMessage(message))\r\n        setMessage('')\r\n    })\r\n\r\n\r\n    ///block WebSocket\r\n\r\n\r\n    const [message, setMessage] = useState('')\r\n    const dispatch = useDispatch()\r\n\r\n    const status = useAppSelector((state) => state.chat.status)\r\n\r\n\r\n    // const sendMessageHandler = () => {\r\n    //     if (!message) {\r\n    //         return\r\n    //     }\r\n    //     dispatch(sendMessage(message))\r\n    //     setMessage('')\r\n    // }\r\n\r\n\r\n    return <>\r\n        <form onSubmit={onSubmit}>\r\n            <div className={p.flex_container}>\r\n\r\n\r\n                <div className={p.text_field}>\r\n                    <TextField\r\n                        {...register(\"post\", {required: true, maxLength: 300})}\r\n                        error={!!errors.post}\r\n                        type='text'\r\n                        onChange={(e) => setMessage(e.currentTarget.value)}\r\n                        value={message}\r\n                        id=\"filled-multiline-flexible\"\r\n                        label=\"Add your post\"\r\n\r\n                        multiline\r\n                        color={\"info\"}\r\n                        style={{width: \"100%\", padding: \"5px\" , height:'75px'}}\r\n\r\n                        sx={{\r\n                            bgcolor: 'AppWorkspace',\r\n                            boxShadow: 1,\r\n                            borderRadius: 2\r\n                        }}\r\n\r\n                    />\r\n                </div>\r\n\r\n                <div className={p.btn_container}>\r\n\r\n                    <Button className={p.btn}\r\n                            style={{backgroundColor: '#6c7272'}}\r\n                            size='small'\r\n                            type=\"submit\"\r\n                            variant=\"contained\"\r\n                            disabled={status !== 'ready'}\r\n                            onClick={onSubmit}\r\n\r\n                    >{buttonType}</Button>\r\n\r\n\r\n                    <div className={p.image_upload}>\r\n\r\n\r\n                        <label htmlFor=\"contained-button-file\">\r\n                            <AddIcon/>\r\n                        </label>\r\n\r\n\r\n                        <AddAPhotoIcon/>\r\n                        <GifBoxRoundedIcon/>\r\n                    </div>\r\n\r\n                </div>\r\n\r\n\r\n            </div>\r\n        </form>\r\n\r\n    </>\r\n});\r\n\r\n","import {useAppSelector} from \"../../../state/redux-store\";\r\nimport React, {useEffect, useRef, useState} from \"react\";\r\nimport h from \"../Dialogs.module.css\";\r\nimport {Avatar} from \"@mui/material\";\r\n\r\nexport const Message = () => {\r\n\r\n    const messages = useAppSelector((state) => state.chat.messages)\r\n    const messagesAnchorRef = useRef<HTMLDivElement>(null);\r\n    const [isAutoScroll, setIsAutoScroll] = useState(true)\r\n\r\n    const scrollHandler = (e: React.UIEvent<HTMLDivElement, UIEvent>) => {\r\n        const element = e.currentTarget;\r\n        if (Math.abs((element.scrollHeight - element.scrollTop) - element.clientHeight) < 300) {\r\n            !isAutoScroll && setIsAutoScroll(true)\r\n        } else {\r\n            isAutoScroll && setIsAutoScroll(false)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (isAutoScroll) {\r\n            messagesAnchorRef.current?.scrollIntoView({behavior: 'smooth'})\r\n        }\r\n    }, [messages])\r\n\r\n\r\n    return (\r\n\r\n        <div  onScroll={scrollHandler} className={h.messages_item}>\r\n            {messages.map(el =>\r\n\r\n                < div className={h.item}>\r\n                    <div key={el.id} id={h.talkbubble}>\r\n\r\n                        <div className={h.one}>\r\n                            <Avatar sx={{width: 56, height: 56}}\r\n                                    src={el.photo ? el.photo : 'https://g1.dcdn.lt/images/pix/aliaksandras-lukasenka-89134905.jpg'}/>\r\n                        </div>\r\n\r\n                        <div className={h.two}>\r\n                            <div><span>{el.userName}</span></div>\r\n                            <div className={h.message}><span>{el.message}</span></div>\r\n                            <div className={h.icons}>\r\n                                {/*<span><FavoriteBorderIcon className={h.logo} color={'primary'}/> </span>*/}\r\n                                {/*<span><ShareIcon className={h.logo}/> </span>*/}\r\n                            </div>\r\n                        </div>\r\n\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};","import React, {useEffect} from \"react\";\r\n\r\nimport h from '../Dialogs.module.css'\r\n\r\nimport {TextInputMessageFormChat} from \"./TextInputMessageFormChat\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {useAppSelector} from \"../../../state/redux-store\";\r\nimport {startMessagesListening, stopMessagesListening} from \"../../../state/chat-reducer\";\r\nimport {Message} from \"./Message\";\r\n\r\n\r\n\r\nfunction Dialogs() {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const status = useAppSelector(state => state.chat.status)\r\n\r\n    useEffect(() => {\r\n        dispatch(startMessagesListening())\r\n        return () => {\r\n            dispatch(stopMessagesListening())\r\n\r\n        }\r\n    }, [])\r\n\r\n\r\n    return (\r\n        <>\r\n            {status === 'error' && <div>Some error occured. Please refresh the page</div>}\r\n            <div className={h.main}>\r\n                <div style={{textAlign: 'center'}}>\r\n                    <h4 style={{color: '#525252'}}>Messages</h4>\r\n                </div>\r\n\r\n\r\n                <Message/>\r\n\r\n\r\n                <div className={h.addMessageBorder}>\r\n                    <TextInputMessageFormChat buttonType={'addMessage'}/>\r\n                </div>\r\n\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Dialogs\r\n\r\n\r\n"],"names":["TextInputMessageFormChat","React","buttonType","useForm","register","handleSubmit","errors","resetField","formState","onSubmit","data","message","dispatch","sendMessage","setMessage","useState","useDispatch","status","useAppSelector","state","chat","className","p","TextField","required","maxLength","error","post","type","onChange","e","currentTarget","value","id","label","multiline","color","style","width","padding","height","sx","bgcolor","boxShadow","borderRadius","Button","backgroundColor","size","variant","disabled","onClick","htmlFor","Add","AddAPhoto","GifBoxRounded","Message","messages","messagesAnchorRef","useRef","isAutoScroll","setIsAutoScroll","useEffect","current","scrollIntoView","behavior","onScroll","element","Math","abs","scrollHeight","scrollTop","clientHeight","h","map","el","Avatar","src","photo","userName","startMessagesListening","stopMessagesListening","textAlign"],"sourceRoot":""}